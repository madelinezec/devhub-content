:template: devhub-article

.. atf-image:: /images/atf-images/quickstart/nodejs.png

.. meta-description::

   Node.js and MongoDB is a powerful pairing and in this Quick Start series we show you how.

.. twitter::
   :creator: @Lauren_Schaefer
   :title: Connect to a MongoDB Database Using Node.js
   :image: /images/social/twitter/twitter-mdb-developer.png
   :image-alt: MongoDB Developer

   Node.js and MongoDB is a powerful pairing and in this Quick Start series we show you how.

.. og::
   :title: Connect to a MongoDB Database Using Node.js
   :image: /images/social/open-graph/og-pink-pattern.png

.. include:: /includes/authors/schaefer-lauren.rst

.. pubdate:: 2020-12-02

.. type:: quickstart

.. level:: beginner

.. tags::

   * Node.js

.. languages::

   * JavaScript

.. products::

   * MongoDB
   * Atlas

===========================================
Connect to a MongoDB Database Using Node.js
===========================================

.. introduction::

   .. image:: /images/qs-badges/qs-badge-nodejs.png
      :alt: QuickStart Node.js Logo
      :scale: 30%
      :align: right

   Use Node.js? Want to learn MongoDB? This is the blog series for you!

   In this Quick Start series, I'll walk you through the basics of how to get started using MongoDB with Node.js. In today's post, we'll work through connecting to a MongoDB database from a Node.js script, retrieving a list of databases, and printing the results to your console.

.. content::

   Set up
   ------

   Before we begin, we need to ensure you've completed a few prerequisite steps.

   Install Node.js
   ~~~~~~~~~~~~~~~

   First, make sure you have a supported version of Node.js installed (the MongoDB Node.js Driver requires Node 4.x or greater and for these examples, I've used Node.js 10.16.3).

   Install the MongoDB Node.js Driver
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   The MongoDB Node.js Driver allows you to easily interact with MongoDB databases from within Node.js applications. You'll need the driver in order to connect to your database and execute the queries described in this Quick Start series.

   If you don't have the MongoDB Node.js Driver installed, you can install it with the following command.

   .. code-block:: bash 

      npm install mongodb

   At the time of writing, this installed version 3.3.2 of the driver. Running npm list mongodb will display the currently installed driver version number. For more details on the driver and installation, see the `official documentation <https://docs.mongodb.com/drivers/node/>`__.

   Create a free MongoDB Atlas cluster and load the sample data
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Next, you'll need a MongoDB database. Your database will be stored inside of a cluster. At a high level, a cluster is a set of nodes where copies of your database will be stored.

   The easiest way to get started with MongoDB is to use Atlas, MongoDB's fully-managed database-as-a-service. `Head over to Atlas <https://www.mongodb.com/cloud/atlas>`__ and create a new cluster in the free tier. Once your tier is created, `load the sample data <https://docs.atlas.mongodb.com/sample-data/>`__.

   .. blockquote::

      Get started with an M0 cluster on `Atlas <https://www.mongodb.com/cloud/atlas>`__ today. It's free forever, and it's the easiest way to try out the steps in this blog series.

   If you're not familiar with how to create a new cluster and load the sample data, check out `this video tutorial <https://developer.mongodb.com/quickstart/free-atlas-cluster>`__ from MongoDB Developer Advocate `Maxime Beugnet <https://www.linkedin.com/in/maximebeugnet>`__.

   Get your cluster's connection info
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   The final step is to prep your cluster for connection.

   In `Atlas <https://www.mongodb.com/cloud/atlas>`__, navigate to your cluster and click **CONNECT**. The Cluster Connection Wizard will appear.

   The Wizard will prompt you to whitelist your current IP address and create a MongoDB user if you haven't already done so. Be sure to note the username and password you use for the new MongoDB user as you'll need them in a later step.

   Next, the Wizard will prompt you to choose a connection method. Select **Connect Your Application**. When the Wizard prompts you to select your driver version, select **Node.js** and **3.0 or later**. Copy the provided connection string.

   For more details on how to access the Connection Wizard and complete the steps described above, see the `official documentation <https://docs.atlas.mongodb.com/connect-to-cluster/>`__.

   Connect to your database from a Node.js application
   ---------------------------------------------------

   Now that everything is set up, it's time to code! Let's write a Node.js script that connects to your database and lists the databases in your cluster.

   Import MongoClient
   ~~~~~~~~~~~~~~~~~~

   The MongoDB module exports ``MongoClient``, and that's what we'll use to connect to a MongoDB database. We can use an instance of MongoClient to connect to a cluster, access the database in that cluster, and close the connection to that cluster.

   .. code-block:: js 
      
      const {MongoClient} = require('mongodb');

   Create our main function
   ~~~~~~~~~~~~~~~~~~~~~~~~

   Let's create an asynchronous function named ``main()`` where we will connect to our MongoDB cluster, call functions that query our database, and disconnect from our cluster.

   The first thing we need to do inside of ``main()`` is create a constant for our connection URI. The connection URI is the connection string you copied in Atlas in the previous section. When you paste the connection string, don't forget to update ``<username>`` and ``<password>`` to be the credentials for the user you created in the previous section. **Note**: the username and password you provide in the connection string are NOT the same as your Atlas credentials.

   .. code-block:: js 

      /**
      * Connection URI. Update <username>, <password>, and <your-cluster-url> to reflect your cluster.
      * See https://docs.mongodb.com/ecosystem/drivers/node/ for more details
      */
      const uri = "mongodb+srv://<username>:<password>@<your-cluster-url>/test?retryWrites=true&w=majority";       

   Now that we have our URI, we can create an instance of MongoClient.

   .. code-block:: js 

      const client = new MongoClient(uri);

   **Note**: When you run this code, you may see DeprecationWarnings around the URL string ``parser`` and the Server Discover and Monitoring engine. If you see these warnings, you can remove them by passing options to the MongoClient. For example, you could instantiate MongoClient by calling ``new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true })``. See the `Node.js MongoDB Driver API documentation <https://mongodb.github.io/node-mongodb-native/3.3/api/MongoClient.html>`__ for more information on these options.

   Now we're ready to use MongoClient to connect to our cluster. ``client.connect()`` will return a `promise <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`__. We will use the `await <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await>`__ keyword when we call ``client.connect()`` to indicate that we should block further execution until that operation has completed.

   .. code-block:: js 

      await client.connect();

   Now we are ready to interact with our database. Let's build a function that prints the names of the databases in this cluster. It's often useful to contain this logic in well named functions in order to improve the readability of your codebase. Throughout this series, we'll create new functions similar to the function we're creating here as we learn how to write different types of queries. For now, let's call a function named ``listDatabases()``.

   .. code-block:: js 

      await listDatabases(client);

   Let's wrap our calls to functions that interact with the database in a ``try/catch`` statement so that we handle any unexpected errors.

   .. code-block:: js 

      try {
          await client.connect();
      
          await listDatabases(client);
       
      } catch (e) {
          console.error(e);
      }

   We want to be sure we close the connection to our cluster, so we'll end our ``try/catch`` with a finally statement.

   .. code-block:: js 

      finally {
          await client.close();
      }

   Once we have our ``main()`` function written, we need to call it. Let's send the errors to the console.

   .. code-block:: js 

      main().catch(console.error);

   Putting it all together, our ``main()`` function and our call to it will look something like the following.

   .. code-block:: js 

      async function main(){
          /**
           * Connection URI. Update <username>, <password>, and <your-cluster-url> to reflect your cluster.
           * See https://docs.mongodb.com/ecosystem/drivers/node/ for more details
           */
          const uri = "mongodb+srv://<username>:<password>@<your-cluster-url>/test?retryWrites=true&w=majority";
       
      
          const client = new MongoClient(uri);
       
          try {
              // Connect to the MongoDB cluster
              await client.connect();
       
              // Make the appropriate DB calls
              await  listDatabases(client);
       
          } catch (e) {
              console.error(e);
          } finally {
              await client.close();
          }
      }
      
      main().catch(console.error);

   List the databases in our cluster
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   In the previous section, we referenced the ``listDatabases()`` function. Let's implement it!

   This function will retrieve a list of databases in our cluster and print the results in the console.

   .. code-block:: js 

      async function listDatabases(client){
          databasesList = await client.db().admin().listDatabases();
       
          console.log("Databases:");
          databasesList.databases.forEach(db => console.log(` - ${db.name}`));
      };

   Save Your File
   ~~~~~~~~~~~~~~

   You've been implementing a lot of code. Save your changes, and name your file something like ``connection.js``. To see a copy of the complete file, visit the `nodejs-quickstart <https://github.com/mongodb-developer/nodejs-quickstart/blob/master/connection.js>`__ GitHub repo.

   Execute Your Node.js Script
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Now you're ready to test your code! Execute your script by running a command like the following in your terminal: ``node connection.js``

   You will see output like the following:

   .. code-block:: js 

      Databases:
       - sample_airbnb
       - sample_geospatial
       - sample_mflix
       - sample_supplies
       - sample_training
       - sample_weatherdata
       - admin
       - local

.. summary::

   What's next?
   ------------

   Today, you were able to connect to a MongoDB database from a Node.js script, retrieve a list of databases in your cluster, and view the results in your console. Nice!

   In future posts in this series, we'll dive into each of the CRUD (create, read, update, and delete) operations as well as topics like change streams, transactions, and the aggregation pipeline, so you'll have the tools you need to successfully interact with data in your databases.

   In the meantime, check out the following resources:

   * `MongoDB Node.js Driver <https://mongodb.github.io/node-mongodb-native/index.html>`__
   * `Official MongoDB Documentation on the MongoDB Node.js Driver <https://docs.mongodb.com/drivers/node/>`__
   * `MongoDB University Free Course: M220JS: MongoDB for Javascript Developers <https://university.mongodb.com/courses/M220JS/about>`__

   Series versions
   ~~~~~~~~~~~~~~~

   This examples in this article were created with the following application versions:

   .. list-table::
      :header-rows: 1

      * - Component
        - Version used
      * - MongoDB
        - 4.0
      * - MongoDB Node.js Driver
        - 3.3.2
      * - Node.js
        - 10.16.3

   Questions? Comments? We'd love to connect with you. Join the conversation on the `MongoDB Community Forums <https://developer.mongodb.com/community/forums/>`__.
