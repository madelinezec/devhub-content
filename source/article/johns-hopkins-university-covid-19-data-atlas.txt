:template: devhub-article

.. ---------------------------------------------------------------
.. META FIELDS FOR SEO / SOCIAL
.. ---------------------------------------------------------------

.. meta-description:: 

   Making the John Hopkins University COVID-19 Data open and accessible to all with MongoDB

.. twitter::
   :site: @mongodb
   :creator: @MBeugnet
   :title: Access the JHU dataset via MongoDB, GraphQL, REST, SQL
   :image: /images/social/twitter/twitter-covid19.png
   :image-alt: Virus representation

   Making the John Hopkins University COVID 19 Data open and accessible to all with MongoDB

.. og::
   :url: http://developer.mongodb.com/article/open-data-covid19
   :title: Open and clean COVID-19 dataset from Johns Hopkins University.
   :image: /images/social/open-graph/og-covid19.png
   :type: article

   Making the John Hopkins University COVID-19 Data open and accessible to all with MongoDB

.. ---------------------------------------------------------------
.. ARTICLE METADATA FIELDS (TO POPULATE FILTERS AND ARTICLE PAGE)
.. ---------------------------------------------------------------

.. include:: /includes/authors/beugnet-maxime.rst

.. include:: /includes/authors/smith-mark.rst

.. include:: /includes/authors/bassett-aaron.rst

.. include:: /includes/authors/karlsson-joe.rst

.. pubdate:: 2020-04-20

.. type:: article

.. level:: beginner

.. tags::

   * Analytics
   * API
   * BI
   * Data Visualization
   * GraphQL
   * Node.js
   * SQL
   * Time Series

.. languages::

   * Java
   * JavaScript
   * Python

.. products::

   * MongoDB
   * Atlas
   * Charts

.. atf-image:: /images/atf-images/illustrations/covid19.png

.. ---------------------------------------------------------------
.. ARTICLE CONTENT
.. ---------------------------------------------------------------

========================================================================
How to work with Johns Hopkins University COVID-19 Data in MongoDB Atlas
========================================================================

.. introduction::

   As the COVID-19 pandemic has swept the globe, the work of `JHU (John Hopkins University) <https://www.jhu.edu/>`__ and its `COVID-19 dashboard <https://coronavirus.jhu.edu/map.html>`__ has become vitally important in keeping people informed about the progress of the virus in their communities, in their countries, and in the world.

   JHU not only publishes their dashboard, but `they make the data powering it freely available for anyone to use <https://github.com/CSSEGISandData/COVID-19>`__. However, their data is delivered as flat CSV files which you need to download each time to then query. We've set out to make that up-to-date data more accessible so people could build other analyses and applications directly on top of the data set.

   We are now hosting a service with a frequently updated copy of the JHU data in MongoDB Atlas, our database in the cloud. This data is free for anyone to query using the MongoDB Query language and/or SQL. We also support a `variety of BI tools directly <https://docs.atlas.mongodb.com/bi-connection/>`__ so you can query the data with Tableau, Qlik and Excel.

   With the MongoDB COVID-19 dataset there will be no more manual downloads and no more frequent format changes. With this data set, this service will deliver a consistent JSON and SQL view every day with no downstream `ETL <https://www.webopedia.com/TERM/E/ETL.html>`__ required.

   None of the actual data is modified. It is simply structured to make it easier to query by placing it within a `MongoDB Atlas <https://www.mongodb.com/cloud/atlas>`__ cluster and by creating some convenient APIs.

   **Table of content:**

   - :ref:`covid19-where-do-we-get-the-data`
   - :ref:`covid19-the-mongodb-dataset`
   - :ref:`covid19-get-started`

     - :ref:`covid19-charts`
     - :ref:`covid19-compass`
     - :ref:`covid19-shell`
     - :ref:`covid19-java`
     - :ref:`covid19-nodejs`
     - :ref:`covid19-python`
     - :ref:`covid19-golang`
     - :ref:`covid19-colab-notebook`
     - :ref:`covid19-bi-tools`
     - :ref:`covid19-sql`
     - :ref:`covid19-export`

   - :ref:`covid19-wrap-up`
   - :ref:`covid19-sources`

.. content::

   .. _covid19-where-do-we-get-the-data:

   Where do we get the data?
   -------------------------

   All data is from `JHU <https://www.jhu.edu/>`__, they source their data from

   - the World Health Organization,
   - the National Health Commission of the People's Republic of China,
   - the United States Centre for Disease Control,
   - the Australia Government Department of Health,
   - the European Centre for Disease Prevention and Control,
   - and many others.

   You can read the `full list on their GitHub repository <https://github.com/CSSEGISandData/COVID-19>`__.

   .. _covid19-the-mongodb-dataset:

   The MongoDB Dataset
   -------------------

   We produced two different databases in our cluster.

   - ``covid19jhu`` contains the raw CSV files imported with the `mongoimport <https://docs.mongodb.com/manual/reference/program/mongoimport/>`__ tool,
   - ``covid19`` contains the same dataset but with a clean MongoDB schema design with all the good practices we are recommending.

   Here is an example of a document in the ``covid19`` database:

   .. code-block:: javascript

      {
        "_id" : ObjectId("5e957bfcbd78b2f11ba349bf"),
        "uid" : 312,
        "country_iso2" : "GP",
        "country_iso3" : "GLP",
        "country_code" : 312,
        "state" : "Guadeloupe",
        "country" : "France",
        "combined_name" : "Guadeloupe, France",
        "population" : 400127,
        "loc" : {
          "type" : "Point",
          "coordinates" : [ -61.551, 16.265 ]
        },
        "date" : ISODate("2020-04-13T00:00:00Z"),
        "confirmed" : 143,
        "deaths" : 8,
        "recovered" : 67
      }

   The document above was obtained by joining together the file ``UID_ISO_FIPS_LookUp_Table.csv`` and the CSV files time series you can find in `this folder <https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_time_series>`__.

   Some fields might not exist in all the documents because they are not relevant or are just not provided by `JHU <https://www.jhu.edu/>`__. If you want more details, run a schema analysis with `MongoDB Compass <https://www.mongodb.com/products/compass>`__ on the ``covid19.statistics`` collection.

   If you would prefer to host the data yourself, the scripts required to download and transform the JHU data are open-source. You can `view them and instructions for how to use them on our GitHub repository <https://github.com/mongodb-developer/open-data-covid-19/tree/master/data-import>`__.

   .. _covid19-get-started:

   Get Started
   -----------

   You can begin exploring the data right away without any MongoDB or programming experience using `MongoDB Charts <https://www.mongodb.com/products/charts>`__ or `MongoDB Compass <https://www.mongodb.com/products/compass>`__.

   In the following sections, we will also show you how to consume this dataset using the Java, Node.js and Python drivers.

   We will show you how to perform the following queries in each language:

   - Retrieve the last 5 days of data for a given place,
   - Retrieve all the data for the last day,
   - Make a geospatial query to retrieve data within a certain distance of a given place.

   .. _covid19-charts:

   Explore the Dataset with MongoDB Charts
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   With `Charts <https://www.mongodb.com/products/charts>`__, you can create visualisations of the data using any of the pre-built graphs and charts. You can then `arrange this into a unique dashboard <https://charts.mongodb.com/charts-coronavirus-lwlvn/public/dashboards/5e7a3667-c25a-4c3c-8ba2-5f5d6910e339>`__, or embed the charts in your pages or blogs.

   .. charts::
      :url: https://charts.mongodb.com/charts-coronavirus-lwlvn
      :id: 28dc1e9e-27a5-4259-ad5b-0f2b1bc9ff5e
      :autorefresh: 3600
      :theme: light

   .. blockquote::

      If you want to create your own MongoDB Charts dashboard, you will need to set up your own `Free MongoDB Atlas <https://www.mongodb.com/cloud/atlas>`__ cluster and import the dataset in your cluster using the `import scripts <https://github.com/mongodb-developer/open-data-covid-19/tree/master/data-import>`__.

   .. _covid19-compass:

   Explore the Dataset with MongoDB Compass
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   `Compass <https://www.mongodb.com/products/compass>`__ allows you to dig deeper into the data using the `MongoDB Query Language <https://docs.mongodb.com/manual/tutorial/query-documents/>`__ or via the `Aggregation Pipeline <https://docs.mongodb.com/manual/core/aggregation-pipeline/>`__ visual editor. Perform a range of operations on the data, `including mathematical, comparison and groupings <https://docs.mongodb.com/manual/meta/aggregation-quick-reference/#operator-expressions>`__. Create documents that provide unique insights and interpretations. You can use the output from your pipelines as `data-sources for your Charts <https://docs.mongodb.com/charts/saas/data-sources/>`__.

   .. image:: /images/compass-covid19-screencast.gif
      :alt: Screencast showing some of the features of MongoDB Compass for exploring COVID-19 Data

   For MongoDB Compass or your driver, you can use this connection string.

   .. code-block::

      mongodb+srv://readonly:readonly@covid-19.hip2i.mongodb.net/test

   .. _covid19-shell:

   Explore the Dataset with the MongoDB Shell
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Because we store the data in MongoDB, you can also access it via the `MongoDB Shell <https://docs.mongodb.com/manual/mongo/>`__ or using `any of our drivers <https://docs.mongodb.com/drivers/>`__. We've limited access to these collections to 'read-only'. You can find the connection strings for the shell and Compass below, as well as driver examples for `Java <https://docs.mongodb.com/drivers/java/>`__, `Node.js <https://docs.mongodb.com/drivers/node/>`__, and `Python <https://docs.mongodb.com/drivers/python/>`__ to get you started.

   .. code-block:: shell

      mongo "mongodb+srv://covid-19.hip2i.mongodb.net/test"  --username readonly --password readonly

   .. _covid19-java:

   Accessing the Data with Java
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Our Java examples are available in our `Github Repository Java folder <https://github.com/mongodb-developer/open-data-covid-19/tree/master/java>`__.

   With the MongoDB Driver
   ```````````````````````

   Here is the main class of our Java example. Of course, you need the three POJOs from the `Java Github folder <https://github.com/mongodb-developer/open-data-covid-19/tree/master/java/mongodb-driver/src/main/java/com/mongodb/coronavirus>`__ to make this work.

   .. code-block:: java

      package com.mongodb.coronavirus;

      import com.mongodb.ConnectionString;
      import com.mongodb.MongoClientSettings;
      import com.mongodb.client.MongoClient;
      import com.mongodb.client.MongoClients;
      import com.mongodb.client.MongoCollection;
      import com.mongodb.client.MongoDatabase;
      import org.bson.codecs.configuration.CodecRegistry;
      import org.bson.codecs.pojo.PojoCodecProvider;
      import org.bson.conversions.Bson;

      import java.util.Date;

      import static com.mongodb.client.model.Filters.*;
      import static com.mongodb.client.model.Sorts.descending;
      import static org.bson.codecs.configuration.CodecRegistries.fromProviders;
      import static org.bson.codecs.configuration.CodecRegistries.fromRegistries;

      public class MongoDB {

          public static void main(String[] args) {
              try (MongoClient client = MongoClients.create(getMongoClient())) {
                  int earthRadius = 6371;
                  MongoDatabase db = client.getDatabase("covid19");
                  MongoCollection<Stat> statsCollection = db.getCollection("statistics", Stat.class);
                  MongoCollection<Metadata> metadataCollection = db.getCollection("metadata", Metadata.class);

                  System.out.println("Query to get the last 5 entries for France (continent only)");
                  Bson franceFilter = eq("country", "France");
                  Bson noStateFilter = eq("state", null);
                  statsCollection.find(and(franceFilter, noStateFilter)).sort(descending("date")).limit(5).forEach(System.out::println);

                  System.out.println("\nQuery to get the last day data (limited to 5 docs here).");
                  Metadata metadata = metadataCollection.find().first();
                  Date lastDate = metadata.getLastDate();
                  Bson lastDayFilter = eq("date", lastDate);
                  statsCollection.find(lastDayFilter).limit(5).forEach(System.out::println);

                  System.out.println("\nQuery to get the last day data for all the countries within 500km of Paris.");
                  Bson aroundParisFilter = geoWithinCenterSphere("loc", 2.341908, 48.860199, 500.0 / earthRadius);
                  statsCollection.find(and(lastDayFilter, aroundParisFilter)).forEach(System.out::println);

                  System.out.println("\nPrint the Metadata summary.");
                  metadataCollection.find().forEach(System.out::println);
              }
          }

          private static MongoClientSettings getMongoClient() {
              String connectionString = "mongodb+srv://readonly:readonly@covid-19.hip2i.mongodb.net/test";
              CodecRegistry pojoCodecRegistry = fromProviders(PojoCodecProvider.builder().automatic(true).build());
              CodecRegistry codecRegistry = fromRegistries(MongoClientSettings.getDefaultCodecRegistry(), pojoCodecRegistry);
              return MongoClientSettings.builder()
                                        .applyConnectionString(new ConnectionString(connectionString))
                                        .codecRegistry(codecRegistry)
                                        .build();
          }
      }

   .. _covid19-nodejs:

   Accessing the Data with Node.js
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Our Node.js examples are available in our `Github Repository Node.js folder <https://github.com/mongodb-developer/open-data-covid-19/tree/master/nodejs>`__.

   With the MongoDB Driver
   ```````````````````````

   Check out the instructions in the `Node.js folder <https://github.com/mongodb-developer/open-data-covid-19/tree/master/nodejs/mongodb-driver>`__.

   .. code-block:: javascript

      const MongoClient = require("mongodb").MongoClient;

      const uri =
        "mongodb+srv://readonly:readonly@covid-19.hip2i.mongodb.net/test?retryWrites=true&w=majority";

      const client = new MongoClient(uri, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
      });

      client.connect((err) => {
        const covid19Database = client.db("covid19");
        const statistics = covid19Database.collection("statistics");
        const metadata = covid19Database.collection("metadata");

        // Query to get the last 5 entries for France (continent only)
        statistics
          .find({ country: "France" })
          .sort(["date", -1])
          .limit(15)
          .toArray((err, docs) => {
            if (err) {
              console.error(err);
            }
            console.log(docs);
          });

        //Query to get the last day data (limited to 5 docs here).
        metadata
          .find()
          .toArray((err, docs) => {
            if (err) {
              console.error(err);
            }
            const lastDate = docs[0].last_date;

            statistics
              .find({ date: { $eq: lastDate } })
              .limit(5)
              .toArray((err, docs) => {
                if (err) {
                  console.error(err);
                }
                console.log(docs);
              });
          });

        // Query to get the last day data for all the countries within 500km of Paris.
        const lon = 2.341908;
        const lat = 48.860199;
        const earthRadius = 6371; // km
        const searchRadius = 500; // km

        metadata
          .find()
          .toArray((err, docs) => {
            if (err) {
              console.error(err);
            }
            const lastDate = docs[0].last_date;

            statistics
              .find({
                date: { $eq: lastDate },
                loc: {
                  $geoWithin: {
                    $centerSphere: [[lon, lat], searchRadius / earthRadius],
                  },
                },
              })
              .limit(5)
              .toArray((err, docs) => {
                if (err) {
                  console.error(err);
                }
                console.log(docs);
              });
          });
      });

   .. _covid19-python:

   Accessing the Data with Python
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Our Python examples are available in our `Github Repository Python folder <https://github.com/mongodb-developer/open-data-covid-19/tree/master/python>`__.

   With the MongoDB Driver
   ```````````````````````

   See all the instructions to get started in the `Python folder <https://github.com/mongodb-developer/open-data-covid-19/tree/master/python/mongodb-driver>`__.

   .. code-block:: python

      #!python3

      import pymongo
      from pymongo import MongoClient
      from tabulate import tabulate

      EARTH_RADIUS = 6371.0
      MDB_URL = "mongodb+srv://readonly:readonly@covid-19.hip2i.mongodb.net/test?retryWrites=true&w=majority"


      def main():
          client = MongoClient(MDB_URL)
          db = client.get_database("covid19")
          stats = db.get_collection("statistics")
          metadata = db.get_collection("metadata")

          # Get some results for the UK:
          print("\nMost recent 10 statistics for the UK:")
          results = (
              stats.find({"country": "United Kingdom", "state": None})
              .sort("date", pymongo.DESCENDING)
              .limit(10)
          )
          print_table(["date", "confirmed", "deaths"], results)

          # Get the last date loaded:
          meta = metadata.find_one()
          last_date = meta["last_date"]

          # Show the 5 locations with the most recovered cases:
          print("\nThe last day's highest reported recoveries:")
          results = (
              stats.find({"date": last_date}).sort("recovered", pymongo.DESCENDING).limit(5)
          )
          print_table(["combined_name", "recovered"], results)

          # Confirmed cases for all countries within 500km of Paris:
          print(
              "\nThe last day's confirmed cases for all the countries within 500km of Paris:"
          )
          results = stats.find(
              {
                  "date": last_date,
                  "loc": {
                      "$geoWithin": {
                          "$centerSphere": [[2.341908, 48.860199], 500.0 / EARTH_RADIUS]
                      }
                  },
              }
          )
          print_table(["combined_name", "confirmed"], results)


      def print_table(doc_keys, search_results, headers=None):
          """
          Utility function to print a query result as a table.

          Params:
              doc_keys: A list of keys for data to be extracted from each document.
              search_results: A MongoDB cursor.
              headers: A list of headers for the table. If not provided, attempts to
                  generate something sensible from the provided `doc_keys`
          """
          if headers is None:
              headers = [key.replace("_", " ").replace("-", " ").title() for key in doc_keys]
          records = (extract_tuple(doc, doc_keys) for doc in search_results)
          print(tabulate(records, headers=headers))


      def extract_tuple(mapping, keys):
          """
          Extract a tuple from a mapping by requesting a sequence of keys.

          Missing keys will result in `None` values in the resulting tuple.
          """
          return tuple([mapping.get(key) for key in keys])


      if __name__ == "__main__":
          main()

   .. _covid19-golang:

   Accessing the Data with Golang
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Our Golang examples are available in our `Github Repository Golang folder <https://github.com/mongodb-developer/open-data-covid-19/tree/master/golang>`__.

   With the MongoDB Driver
   ```````````````````````

   See all the instructions to get started in the `Golang folder <https://github.com/mongodb-developer/open-data-covid-19/tree/master/golang/mongodb-driver>`__.

   .. code-block:: go

      package main

      import (
      	"context"
      	"fmt"
      	"os"
      	"strconv"
      	"time"

      	"github.com/olekukonko/tablewriter"
      	"go.mongodb.org/mongo-driver/bson"
      	"go.mongodb.org/mongo-driver/bson/primitive"
      	"go.mongodb.org/mongo-driver/mongo"
      	"go.mongodb.org/mongo-driver/mongo/options"
      )

      const mdbURL = "mongodb+srv://readonly:readonly@covid-19.hip2i.mongodb.net/covid19?retryWrites=true&w=majority"
      const earthRadius = 6371.0

      // Metadata represents (a subset of) the data stored in the metadata
      // collection in a single document.
      type Metadata struct {
      	LastDate time.Time `bson:"last_date"`
      	// There are other fields in this document, but this sample code doesn't
      	// use them.
      }

      // Statistic represents the document structure of documents in the
      // 'statistics' collection.
      type Statistic struct {
      	ID  primitive.ObjectID `bson:"_id"`
      	UID int32

      	// Location:
      	CombinedName string `bson:"combined_name"`
      	City         string
      	State        string
      	Country      string
      	CountryCode  int32  `bson:"country_code"`
      	CountryISO2  string `bson:"country_iso2"`
      	CountryISO3  string `bson:"country_iso3"`
      	FIPS         int32
      	Loc          struct {
      		Type        string
      		Coordinates []float64
      	}

      	Date time.Time

      	// Statistics:
      	Confirmed  int32
      	Deaths     int32
      	Population int32
      	Recovered  int32
      }

      // main is the entrypoint for this binary.
      // It connects to MongoDB but most of the interesting code is in other functions.
      func main() {
      	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
      	defer cancel()
      	client, err := mongo.Connect(ctx, options.Client().ApplyURI(mdbURL))
      	if err != nil {
      		panic(fmt.Sprintf("Error initializing MongoDB Client: %v", err))
      	}
      	defer client.Disconnect(ctx)

      	// Get references to the main collections:
      	database := client.Database("covid19")
      	statistics := database.Collection("statistics")
      	metadata := database.Collection("metadata")

      	// Print some interesting results:
      	fmt.Println("\nMost recent 10 statistics for United Kingdom:")
      	recentCountryStats(statistics, "United Kingdom")
      	lastDate := mostRecentDateLoaded(metadata)
      	fmt.Printf("\nLast date loaded: %v\n", lastDate)
      	fmt.Println("\nThe last day's highest reported recoveries:")
      	highestRecoveries(statistics, lastDate)
      	fmt.Println("\nThe last day's confirmed cases for all the countries within 500km of Paris:")
      	confirmedWithinRadius(statistics, lastDate, 2.341908, 48.860199, 500.0)
      }

      // recentCountryStats prints the most recent 10 stats for a country.
      // Note that this won't work for "US" because that data is broken down by city & state.
      func recentCountryStats(statistics *mongo.Collection, country string) {
      	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
      	defer cancel()
      	findOptions := options.Find().SetSort(bson.D{{"date", -1}}).SetLimit(10)
      	cur, err := statistics.Find(ctx, bson.D{{"country", country}, {"state", nil}}, findOptions)
      	if err != nil {
      		panic(err)
      	}
      	defer cur.Close(ctx)
      	adapter := func(s Statistic) []string {
      		return []string{
      			s.Date.String(),
      			strconv.Itoa(int(s.Confirmed)),
      			strconv.Itoa(int(s.Recovered)),
      			strconv.Itoa(int(s.Deaths)),
      		}
      	}
      	printTable(ctx, []string{"Date", "Confirmed", "Recovered", "Deaths"}, cur, adapter)
      }

      // mostRecentDateLoaded gets the date of the last data loaded into the database
      // from the 'metadata' collection.
      func mostRecentDateLoaded(metadata *mongo.Collection) time.Time {
      	var meta Metadata
      	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
      	defer cancel()
      	if err := metadata.FindOne(ctx, bson.D{}).Decode(&meta); err != nil {
      		panic(fmt.Sprintf("Error loading metadata document: %v", err))
      	}
      	return meta.LastDate
      }

      // highestRecoveries prints the top 5 countries with the most recoveries.
      func highestRecoveries(statistics *mongo.Collection, date time.Time) {
      	/// The last day's highest reported recoveries
      	opts := options.Find().SetSort(bson.D{{"recovered", -1}}).SetLimit(5)
      	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
      	defer cancel()
      	cur, err := statistics.Find(ctx, bson.D{{"date", date}}, opts)
      	if err != nil {
      		panic(err)
      	}
      	defer cur.Close(ctx)
      	adapter := func(s Statistic) []string {
      		return []string{s.CombinedName, strconv.Itoa(int(s.Recovered))}
      	}
      	printTable(ctx, []string{"Country", "Recovered"}, cur, adapter)
      }

      // Confirmed cases for all countries within radius km of a lon/lat coordinate:
      func confirmedWithinRadius(statistics *mongo.Collection, date time.Time, lon float64, lat float64, radius float64) {
      	center := bson.A{lon, lat}
      	locationExpr := bson.E{
      		"loc", bson.D{{
      			"$geoWithin", bson.D{{
      				"$centerSphere", bson.A{center, radius / earthRadius},
      			}},
      		}},
      	}
      	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
      	defer cancel()
      	cur, err := statistics.Find(ctx, bson.D{{"date", date}, locationExpr})
      	if err != nil {
      		panic(err)
      	}
      	defer cur.Close(ctx)
      	adapter := func(s Statistic) []string {
      		return []string{s.CombinedName, strconv.Itoa(int(s.Confirmed))}
      	}
      	printTable(ctx, []string{"Country", "Confirmed"}, cur, adapter)
      }

      // printTable prints the results of a statistics query in a table.
      // headings provides the heading cell contents
      // mapper is a function which maps Statistic structs to a string array of values to be displayed in the table.
      func printTable(ctx context.Context, headings []string, cursor *mongo.Cursor, mapper func(Statistic) []string) {
      	table := tablewriter.NewWriter(os.Stdout)
      	table.SetHeader(headings)

      	for cursor.Next(ctx) {
      		var result Statistic
      		err := cursor.Decode(&result)
      		if err != nil {
      			panic(err)
      		}

      		table.Append(mapper(result))
      	}
      	if err := cursor.Err(); err != nil {
      		panic(err)
      	}

      	table.Render()
      }

   .. _covid19-colab-notebook:

   Accessing the Data with Google Colaboratory
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   If you have a Google account, a great way to get started is with our `Google Colab Notebook <https://colab.research.google.com/drive/1M_wu0QqAWnml5_WWYSeMESuJp5pUjtx->`__.

   The sample code shows how to install pymongo and use it to connect to the MongoDB COVID-19 dataset.
   There are some example queries which show how to query the data and display it in the notebook,
   and the last example demonstrates how to display a chart using Pandas & Matplotlib!

   .. image:: /images/notebook-screenshot.png
      :alt: How to render a chart in a Colab notebook

   If you want to modify the notebook, you can take a copy by selecting "Save a copy in Drive ..." from the "File" menu,
   and then you'll be free to edit the copy.

   .. _covid19-bi-tools:

   Accessing the Data with Business Intelligence Tools
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   You can get lots of value from the dataset without any programming at all.
   We've enabled the `Atlas BI Connector <https://docs.atlas.mongodb.com/bi-connection/>`__, which exposes an SQL interface to MongoDB's document structure.
   This means you can use data analysis and dashboarding tools like `Tableau <https://www.tableau.com/support/releases/desktop/10.3>`__,
   `Qlik Sense <https://www.qlik.com/us/products/qlik-sense>`__,
   and even `MySQL Workbench <https://www.mysql.com/products/workbench/>`__ to analyze, visualise and extract understanding from the data.

   Here's an example of a visualisation produced in a few clicks with Tableau:

   .. image:: /images/map-tableau.png
      :alt: COVID-19 World map in Tableau.

   Tableau is a powerful data visualisation and dashboard tool, and can be connected to our COVID-19 data in a few steps.
   We've written a `short tutorial <https://github.com/mongodb-developer/open-data-covid-19/blob/master/tableau/README.md>`__ to get you up and running.

   .. _covid19-sql:

   Accessing the Data with any SQL tool
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   As mentioned above, the `Atlas BI Connector <https://docs.atlas.mongodb.com/bi-connection/>`__ is activated so you can connect any SQL tool to this cluster using the following connection information:

   - Server: covid-19-biconnector.hip2i.mongodb.net,
   - Port: 27015,
   - Database: covid19 or covid19jhu (depends which version of the dataset you want to see),
   - Username: readonly or readonly?source=admin,
   - Password: readonly.

   .. _covid19-export:

   Take a copy of the data
   ~~~~~~~~~~~~~~~~~~~~~~~

   Accessing *our* copy of this data in a read-only database is useful,
   but it won't be enough if you want to integrate it with other data within a single MongoDB cluster.
   You can obtain a copy of the database, either to use offline using a different tool outside of MongoDB, or to load into your own MongoDB instance.
   ``mongoexport`` is a command-line tool that produces a `JSONL <http://jsonlines.org/>`__ or CSV export of data stored in a MongoDB instance.
   First, follow these `instructions to install the MongoDB Database Tools <https://docs.mongodb.com/database-tools/mongoexport/#availability>`__.

   Now you can run the following in your console to download the metadata and statistics collections as jsonl files in your current directory:

   .. code-block:: bash

      mongoexport --collection='statistics' --out='statistics.jsonl' --uri="mongodb+srv://readonly:readonly@covid-19.hip2i.mongodb.net/covid19"
      mongoexport --collection='metadata' --out='metadata.jsonl' --uri="mongodb+srv://readonly:readonly@covid-19.hip2i.mongodb.net/covid19"

   .. blockquote::

      Use the ``--jsonArray`` option if you prefer to work with a JSON array rather than a `JSONL <http://jsonlines.org/>`__ file.

   Documentation for all the features of ``mongoexport`` is available on the `MongoDB website <https://docs.mongodb.com/database-tools/mongoexport/>`__ and with the command ``mongoexport --help``.

   Once you have the data on your computer, you can use it directly with local tools, or load it into your own MongoDB instance using `mongoimport <https://docs.mongodb.com/database-tools/mongoimport/>`__.

   .. code-block:: bash

      mongoimport --collection='statistics' --uri="mongodb+srv://<user>:<password>@<your-cluster>.mongodb.net/covid19" statistics.jsonl
      mongoimport --collection='metadata' --uri="mongodb+srv://<user>:<password>@<your-cluster>.mongodb.net/covid19" metadata.jsonl

   .. blockquote::

      Note that you cannot run these commands against our cluster because the user we gave you (``readonly:readonly``) doesn't have write permission on this cluster.

      Read our :doc:`Getting Your Free MongoDB Atlas Cluster blog post </quickstart/free-atlas-cluster>` if you want to know more.

.. summary::

   .. _covid19-wrap-up:

   Wrap up
   -------

   We see the value and importance of making this data as readily available to everyone as possible, so we're not stopping here. Over the coming days, we'll be adding a GraphQL and REST API, as well as making the data available within Excel and Google Sheets.

   We've also launched an `Atlas credits program <https://www.mongodb.com/blog/post/helping-developers-tackle-covid19>`__ for anyone working on detecting, understanding, and stopping the spread of COVID-19.

   If you are having any problems accessing the data or have other data sets you would like to host please contact us on `the MongoDB community <https://community.mongodb.com/>`__. We would also love to showcase any services you build on top of this data set. Finally please send in PRs for any code changes you would like to make to the examples.

   You can also reach out to the authors directly (`Aaron Bassett <https://twitter.com/aaronbassett>`__, `Joe Karlsson <https://twitter.com/JoeKarlsson1>`__, `Mark Smith <https://twitter.com/judy2k>`__, and `Maxime Beugnet <https://twitter.com/MBeugnet>`__) on Twitter.

   .. _covid19-sources:

   Sources
   -------

   - `MongoDB Open Data COVID-19 Github repository <https://github.com/mongodb-developer/open-data-covid-19>`__
   - `JHU Dataset on Github repository <https://github.com/CSSEGISandData/COVID-19>`__
