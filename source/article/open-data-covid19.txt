:template: devhub-article

.. ---------------------------------------------------------------
.. META FIELDS FOR SEO / SOCIAL
.. ---------------------------------------------------------------

.. meta-description:: 

   Making the John Hopkins University Covid 19 Data open and accessible to all with MongoDB

.. twitter::
   :site: @mongodb
   :creator: @MBeugnet
   :title: Access the JHU dataset via MongoDB, GraphQL, REST, SQL
   :image: /images/social/twitter/twitter-covid19.png
   :image-alt: Virus representation

   Making the John Hopkins University Covid 19 Data open and accessible to all with MongoDB

.. og::
   :url: http://developer.mongodb.com/article/open-data-covid19
   :title: Open and clean Covid19 dataset from Johns Hopkins University.
   :image: /images/social/open-graph/og-covid19.png
   :type: article

   Making the John Hopkins University Covid 19 Data open and accessible to all with MongoDB

.. ---------------------------------------------------------------
.. ARTICLE METADATA FIELDS (TO POPULATE FILTERS AND ARTICLE PAGE)
.. ---------------------------------------------------------------

.. include:: /includes/authors/beugnet-maxime.rst

.. include:: /includes/authors/smith-mark.rst

.. include:: /includes/authors/bassett-aaron.rst

.. include:: /includes/authors/karlsson-joe.rst

.. pubdate:: 2020-04-16

.. type:: article

.. level:: beginner

.. tags::

   * Analytics
   * API
   * BI
   * Data Visualization
   * GraphQL
   * Node.js
   * SQL
   * Time Series

.. languages::

   * Java
   * JavaScript
   * Python

.. products::

   * MongoDB
   * Atlas
   * Charts

.. atf-image:: /images/atf-images/illustrations/covid19.png

.. ---------------------------------------------------------------
.. ARTICLE CONTENT
.. ---------------------------------------------------------------

=======================================================
How to access the John Hopkins University Covid-19 Data
=======================================================

.. introduction::

   As the Covid-19 pandemic has swept the globe the work of `JHU (John Hopkins University) and their Covid-19 dashboard <https://coronavirus.jhu.edu/map.html>`__ has become vitally important in keeping people informed about the progress of the virus in their communities, in their countries, and in the world in general.

   JHU not only publishes their dashboard, but `they make the data powering it freely available for anyone to use <https://github.com/CSSEGISandData/COVID-19>`__. However, this data is not in a format that is easy to consume. At MongoDB, we've been working with this data since it was first published while developing our :doc:`Charts dashboard </article/coronavirus-map-live-data-tracker-charts>`. Now we're making `our more accessible version of the JHU data <https://github.com/mongodb-developer/open-data-covid-19>`__ freely available for anyone to use.

   We have not modified the data in any way. What we have done is structured it better and made it easier to query by placing it within a `MongoDB Atlas <https://www.mongodb.com/cloud/atlas>`__ cluster and by creating some convenient APIs.

.. content::

   Where do we get the data?
   -------------------------

   All data is from `JHU <https://www.jhu.edu/>`__, they source their data from

   - the World Health Organization,
   - the National Health Commission of the Peopleâ€™s Republic of China,
   - the United States Centre for Disease Control,
   - the Australia Government Department of Health,
   - the European Centre for Disease Prevention and Control,
   - and many others.

   You can read the `full list on their GitHub repository <https://github.com/CSSEGISandData/COVID-19>`__.

   The MongoDB Dataset
   -------------------

   We produced two different databases in our cluster.

   - ``covid19jhu`` contains the raw CSV files imported with the ``mongoimport`` tool,
   - ``covid19`` contains the same dataset but with a clean MongoDB schema design with all the good practices we are recommending.

   Here is an example of a document in the ``covid19`` database:

   .. code-block:: javascript

      {
        "_id" : ObjectId("5e957bfcbd78b2f11ba349bf"),
        "uid" : 312,
        "country_iso2" : "GP",
        "country_iso3" : "GLP",
        "country_code" : 312,
        "state" : "Guadeloupe",
        "country" : "France",
        "combined_name" : "Guadeloupe, France",
        "population" : 400127,
        "loc" : {
          "type" : "Point",
          "coordinates" : [ -61.551, 16.265 ]
        },
        "date" : ISODate("2020-04-13T00:00:00Z"),
        "confirmed" : 143,
        "deaths" : 8,
        "recovered" : 67
      }

   The document above was obtained by joining together the file ``UID_ISO_FIPS_LookUp_Table.csv`` and the CSV files time series you can find in `this folder <https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_time_series>`__.

   Some fields might not exist in all the documents because they are not relevant or are just not provided by `JHU <https://www.jhu.edu/>`__. If you want more details, run a schema analysis with `MongoDB Compass <https://www.mongodb.com/products/compass>`__ on the `covid19.statistics` collection.

   If you would prefer to host the data yourself, the scripts required to download and transform the JHU data are open-source. You can `view them and instructions for how to use them on our GitHub repository <https://github.com/mongodb-developer/open-data-covid-19/tree/master/data-import>`__.

   Get Started
   -----------

   You can begin exploring the data right away without any MongoDB or programming experience using `MongoDB Charts <https://www.mongodb.com/products/charts>`__ or `MongoDB Compass <https://www.mongodb.com/products/compass>`__.

   With `Charts <https://www.mongodb.com/products/charts>`__, you can create visualisations of the data using any of the pre-built graphs and charts. You can then `arrange this into a unique dashboard <https://charts.mongodb.com/charts-coronavirus-lwlvn/public/dashboards/5e7a3667-c25a-4c3c-8ba2-5f5d6910e339>`__, or embed the charts in your pages or blogs.

   .. charts::
      :url: https://charts.mongodb.com/charts-coronavirus-lwlvn
      :id: 28dc1e9e-27a5-4259-ad5b-0f2b1bc9ff5e
      :autorefresh: 3600
      :theme: light

   .. blockquote::

      If you want to create your own MongoDB Charts dashboard, you will need to setup your own `Free MongoDB Atlas <https://www.mongodb.com/cloud/atlas>`__ cluster and import the dataset in your cluster using the `import scripts <https://github.com/mongodb-developer/open-data-covid-19/tree/master/data-import>`__.


   `Compass <https://www.mongodb.com/products/compass>`__ allows you to dig deeper into the data using the `MongoDB Query Language <https://docs.mongodb.com/manual/tutorial/query-documents/>`__ or via the `Aggregation Pipeline <https://docs.mongodb.com/manual/core/aggregation-pipeline/>`__ visual editor. Perform a range of operations on the data, `including mathematical, comparison and groupings <https://docs.mongodb.com/manual/meta/aggregation-quick-reference/#operator-expressions>`__. Create documents which provide unique insights and interpretations. You can use the output from your pipelines as `data-sources for your Charts <https://docs.mongodb.com/charts/saas/data-sources/>`__.

   .. image:: /images/compass-covid19-screencast.gif
      :alt: Screencast showing some of the features of MongoDB Compass for exploring Covid-19 Data

   Of course, because we store the data in MongoDB, you can also access it via the `MongoDB Shell <https://docs.mongodb.com/manual/mongo/>`__ or using `any of our drivers <https://docs.mongodb.com/drivers/>`__. We've included examples below for `Java <https://docs.mongodb.com/drivers/java/>`__, `Node.js <https://docs.mongodb.com/drivers/node/>`__, and `Python <https://docs.mongodb.com/drivers/python/>`__ to get you started. Of course, you only have a read only access.

   .. code-block:: shell

      mongo "mongodb+srv://covid-19.hip2i.mongodb.net/test"  --username readonly --password readonly

   For MongoDB Compass or your driver, you can use this connexion string.

   .. code-block::

      mongodb+srv://readonly:readonly@covid-19.hip2i.mongodb.net/test

   In the following sections, we will show you how to consume this dataset using the Java, Node.js and Python drivers.

   We will show you how to perform the following queries in each language:

   - Retrieve the last 5 days of data for a given place,
   - Retrieve all the data for the last day,
   - Make a geo spatial query to retrieve data within a certain distance of a given place.

   Accessing the Data with Java
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Our Java examples are available in our `Github Repository's Java folder <https://github.com/mongodb-developer/open-data-covid-19/tree/master/java>`__.

   With the MongoDB Driver
   ```````````````````````

   Here is the main class of our Java example. Of course you need the three POJOs from the `Java Github folder <https://github.com/mongodb-developer/open-data-covid-19/tree/master/java/mongodb-driver/src/main/java/com/mongodb/coronavirus>`__ to make this work.

   .. code-block:: java

      package com.mongodb.coronavirus;

      import com.mongodb.ConnectionString;
      import com.mongodb.MongoClientSettings;
      import com.mongodb.client.MongoClient;
      import com.mongodb.client.MongoClients;
      import com.mongodb.client.MongoCollection;
      import com.mongodb.client.MongoDatabase;
      import org.bson.codecs.configuration.CodecRegistry;
      import org.bson.codecs.pojo.PojoCodecProvider;
      import org.bson.conversions.Bson;

      import java.util.Date;

      import static com.mongodb.client.model.Filters.*;
      import static com.mongodb.client.model.Sorts.descending;
      import static org.bson.codecs.configuration.CodecRegistries.fromProviders;
      import static org.bson.codecs.configuration.CodecRegistries.fromRegistries;

      public class MongoDB {

          public static void main(String[] args) {
              try (MongoClient client = MongoClients.create(getMongoClient())) {
                  int earthRadius = 6371;
                  MongoDatabase db = client.getDatabase("covid19");
                  MongoCollection<Stat> statsCollection = db.getCollection("statistics", Stat.class);
                  MongoCollection<Metadata> metadataCollection = db.getCollection("metadata", Metadata.class);

                  System.out.println("Query to get the last 5 entries for France (continent only)");
                  Bson franceFilter = eq("country", "France");
                  Bson noStateFilter = eq("state", null);
                  statsCollection.find(and(franceFilter, noStateFilter)).sort(descending("date")).limit(5).forEach(System.out::println);

                  System.out.println("\nQuery to get the last day data (limited to 5 docs here).");
                  Metadata metadata = metadataCollection.find().first();
                  Date lastDate = metadata.getLastDate();
                  Bson lastDayFilter = eq("date", lastDate);
                  statsCollection.find(lastDayFilter).limit(5).forEach(System.out::println);

                  System.out.println("\nQuery to get the last day data for all the countries within 500km of Paris.");
                  Bson aroundParisFilter = geoWithinCenterSphere("loc", 2.341908, 48.860199, 500.0 / earthRadius);
                  statsCollection.find(and(lastDayFilter, aroundParisFilter)).forEach(System.out::println);

                  System.out.println("\nPrint the Metadata summary.");
                  metadataCollection.find().forEach(System.out::println);
              }
          }

          private static MongoClientSettings getMongoClient() {
              String connectionString = "mongodb+srv://readonly:readonly@covid-19.hip2i.mongodb.net/test";
              CodecRegistry pojoCodecRegistry = fromProviders(PojoCodecProvider.builder().automatic(true).build());
              CodecRegistry codecRegistry = fromRegistries(MongoClientSettings.getDefaultCodecRegistry(), pojoCodecRegistry);
              return MongoClientSettings.builder()
                                        .applyConnectionString(new ConnectionString(connectionString))
                                        .codecRegistry(codecRegistry)
                                        .build();
          }
      }


   Accessing the Data with Node.js
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Our Node.js examples are available in our `Github Repository's Node.js folder <https://github.com/mongodb-developer/open-data-covid-19/tree/master/nodejs>`__.

   With the MongoDB Driver
   ```````````````````````

   Check out the instructions in the `Node.js folder <https://github.com/mongodb-developer/open-data-covid-19/tree/master/nodejs/mongodb-driver>`__.

   .. code-block:: javascript

      const MongoClient = require("mongodb").MongoClient;

      const uri =
        "mongodb+srv://readonly:readonly@covid-19.hip2i.mongodb.net/test?retryWrites=true&w=majority";

      const client = new MongoClient(uri, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
      });

      client.connect((err) => {
        const statistics = client.db("covid19").collection("statistics");

        // find the latest 15 cases from France
        statistics
          .find({ country: "France" })
          .sort([["a", 1]])
          .limit(15)
          .toArray(function (err, docs) {
            if (err) {
              console.error(err);
            }
            console.log(docs);
            client.close();
          });
      });

   Accessing the Data with Python
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Our Python examples are available in our `Github Repository's Python folder <https://github.com/mongodb-developer/open-data-covid-19/tree/master/python>`__.

   With the MongoDB Driver
   ```````````````````````

   See all the instructions to get started in the `Python folder <https://github.com/mongodb-developer/open-data-covid-19/tree/master/python/mongodb-driver>`__.

   .. code-block:: python

      #!python3

      import pymongo
      from pymongo import MongoClient
      from tabulate import tabulate

      EARTH_RADIUS = 6371.0
      MDB_URL = "mongodb+srv://readonly:readonly@covid-19.hip2i.mongodb.net/test?retryWrites=true&w=majority"


      def main():
          client = MongoClient(MDB_URL)
          db = client.get_database("covid19")
          stats = db.get_collection("statistics")
          metadata = db.get_collection("metadata")

          # Get some results for the UK:
          print("\nMost recent 10 statistics for the UK:")
          results = (
              stats.find({"country": "United Kingdom", "state": None})
              .sort("date", pymongo.DESCENDING)
              .limit(10)
          )
          print_table(["date", "confirmed", "deaths"], results)

          # Get the last date loaded:
          meta = metadata.find_one()
          last_date = meta["last_date"]

          # Show the 5 locations with the most recovered cases:
          print("\nThe last day's highest reported recoveries:")
          results = (
              stats.find({"date": last_date}).sort("recovered", pymongo.DESCENDING).limit(5)
          )
          print_table(["combined_name", "recovered"], results)

          # Confirmed cases for all countries within 500km of Paris:
          print(
              "\nThe last day's confirmed cases for all the countries within 500km of Paris:"
          )
          results = stats.find(
              {
                  "date": last_date,
                  "loc": {
                      "$geoWithin": {
                          "$centerSphere": [[2.341908, 48.860199], 500.0 / EARTH_RADIUS]
                      }
                  },
              }
          )
          print_table(["combined_name", "confirmed"], results)


      def print_table(doc_keys, search_results, headers=None):
          """
          Utility function to print a query result as a table.

          Params:
              doc_keys: A list of keys for data to be extracted from each document.
              search_results: A MongoDB cursor.
              headers: A list of headers for the table. If not provided, attempts to
                  generate something sensible from the provided `doc_keys`
          """
          if headers is None:
              headers = [key.replace("_", " ").replace("-", " ").title() for key in doc_keys]
          records = (extract_tuple(doc, doc_keys) for doc in search_results)
          print(tabulate(records, headers=headers))


      def extract_tuple(mapping, keys):
          """
          Extract a tuple from a mapping by requesting a sequence of keys.

          Missing keys will result in `None` values in the resulting tuple.
          """
          return tuple([mapping.get(key) for key in keys])


      if __name__ == "__main__":
          main()

.. summary::

   Wrap up
   -------

   We see the value and importance of making this data as readily available to everyone as possible, so we're not stopping here. Over the coming days, we'll be adding a GraphQL and REST API, as well as making the data available within Excel and Google Sheets.

   We've also launched an `Atlas credits program <https://www.mongodb.com/blog/post/helping-developers-tackle-covid19>`__ for anyone working on detecting, understanding, and stopping the spread of COVID-19.

   If you have any questions, suggestions, or would like any assistance working with the data, we're always available on the `community forums <https://community.mongodb.com/>`__. You can also reach out to `Aaron <https://twitter.com/aaronbassett>`__, `Joe <https://twitter.com/JoeKarlsson1>`__, `Mark <https://twitter.com/judy2k>`__, and `Maxime <https://twitter.com/MBeugnet>`__ directly on Twitter.
