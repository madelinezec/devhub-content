:template: devhub-article

.. atf-image:: /images/atf-images/logos/O-FISH-hacktoberfest.png

.. meta-description::

   Life Lessons from Hacktoberfest 2020

.. twitter::
   :creator: @Sheeri
   :title: What we learned from Hacktoberfest 2020
   :image: /images/social/twitter/twitter-schema-design-patterns.png
   :image-alt: Schema Design Patterns

   Life Lessons from Hacktoberfest 2020

.. og::
   :title: Life Lessons from Hacktoberfest 2020
   :image: /images/social/open-graph/og-schema-design-patterns.png

.. include:: /includes/authors/cabral-sheeri.rst

.. pubdate:: 2020-11-16

.. type:: article

.. level:: beginner

.. languages::

   * JavaScript
   * Kotlin
   * Swift

.. products::

   * MongoDB
   * Realm
   * Charts
   * Atlas

====================================
Life Lessons from Hacktoberfest 2020
====================================
 
.. introduction:: 

Let's put an intro here.

.. content::
 
Hacktoberfest 2020 is over, and for us it was a resounding success! If you were a part of Hacktoberfest for the `O-FISH project <https://wildaid.github.io/contribute>`__, make sure you watch the `wrap-up video <https://www.youtube.com/watch?v=hzzvEy5tA5I&feature=youtu.be>`__ - it's about 10 minutes.

Let's take a look at the details, why we were successful and how we could have done even better. Whether you're a developer, project maintainer or both, you'll find some great nuggets.

We had over 100 contributions from over 50 different contributors. There were lots of bugfixes, as well as feature additions both small and big - like dark mode for our mobile applications!

.. figure:: /images/article/hacktoberfest/contributions.png
   :alt: Contributions by week per repository

The point of Hacktoberfest is to be a CELEBRATION of open source, not just "to make and get contributions". All pull requests, no matter how big or small, had a great impact. If you participated in Hacktoberfest, do not forget to claim your forum badges! You can still get an O-FISH badge at any time, by contributing to the `O-FISH project <https://wildaid.github.io/contribute/>`__.

.. figure:: /images/article/hacktoberfest/badges.png
   :alt: Hacktoberfest contribution badge featuring a pumpkin shape with binary inside - and O-FISH contribution badge featuring the O-FISH logo

Just go to the community forums post `Open Source Contributors, Pick Up Your Badges Here! <https://developer.mongodb.com/community/forums/t/open-source-contributors-pick-up-your-badges-here/>`__. 


Celebrating the Contributors
----------------------------

Here are all the contributors who made Hacktoberfest so amazing for us! This would not have been possible without all these folks, and 

.. figure:: /images/article/hacktoberfest/contributors.png
   :alt: the github usernames of all 50+ contributors to Hacktoberfest2020

Obviously one of the awesome parts of hacktoberfest was getting stuff done - but more than that, I learned a lot about specific features and elements - for example, I didn't know the difference between `onClick and Link in node.js <https://github.com/WildAid/o-fish-web/pull/327#issuecomment-713241974>`__ - and I felt like we really bonded together as a community that cares about O-FISH.

I also learned that some things we thought were code turned out to be permissions. That means that some folks did research only to find out that the issue required an instance of their own to debug. And, we fixed a lot of bugs we didn't even know existed by fixing permissions. 

Lessons Learned
---------------

First and foremost - being a project maintainer means being a people manager. Behind every pull request (PR) is a person. Unlike in a workplace where I communicate with others all the time, there can be very few communications when contributing to open source. And those communications are public. So I was very careful to consider the receipient of my feedback - there's a world of difference between "This doesn't work," and "I tested this and here's a screenshot of what I see - I don't see X, which the PR was supposed to fix. Can you help me out?"

People likely will not code or organize the way I would expect. Sometimes that's a drawback - if the PR has code that introduces a memory leak, for example. But often a different way of working is a good thing, and leads to discussion. For example, we had two issues that were similar, and assigned to two different people. One person misunderstood their issue, and submitted code that fixed the first issue. The other person understood their issue and submitted code, but used a different method. I had them talk it out with each other in the comments, and we came to a mutual agreement on how to do it. Which is also awesome, because I am learning things too - this particular issue was about using `onClick and Link in node.js <https://github.com/WildAid/o-fish-web/pull/327#issuecomment-713241974>`__, and I didn't know why one was used over the other before this came up.

This is something I do all the time as a product person, but it's more important for someone who's an engineer and doing code on the project, who has been 'promoted' to project maintainer (or team manager!) - Frame things as a problem, not a specific solution. You'd be surprised what people come up with.

Secondly - We set up a sandbox instance where people can `fill out a form <https://wildaidsandbox-mxgfy.mongodbstitch.com/#/users/new_dev_user>`__ and automatically get a login to the sandbox server. 

There are limitations on our implementation, and some issues need your own instance to properly diagnose and fix an issue. Building your own instances takes a few hours. The sandbox is not a perfect solution, but it was a great way to lower the barrier for the folks who wanted smaller issues.

Thirdly - there's a lot of work to do, that is not coding work. Issues should be well-described and defined as small amounts of work, with good titles. Even though I did this in September, I missed a few important items. For example, we had an issue titled "Localization Management System" which sounded really daunting and nobody picked it up. During office hours, I explained to someone wanting to do work that it was really 2 small shell scripts. They took on the work and did a great job! But if I had not explained it during office hours, nobody would have taken it because the title sounds like a huge project.

Office hours were a great idea, and it was awesome that developers showed up to ask questions. That really helped with something I touched on earlier - being able to build relationships.

Lastly - Remember why you're doing this. If it's for free work, you may end up being disappointed. When I get a pull request, I want to accept it. It's heartbreaking to not approve something. In addition to accepting code done differently than I would have done it, I also accepted code that was not quite perfect. Sometimes I accepted that it was good enough, and other times I suggested feedback. 

This is not homework and it is OK to give hints. If someone queried using the wrong function, I'll explain what they did, and what issues that might cause, and then say "use this other function - here's how it works, it takes in X and Y and returns A and B." And I'll link to the code. It's more work on my part, but I'm more familiar with the codebase and the contributor can see that I'm on their team - I'm not just rejecting their PR and saying "use this other function", I'm trying to help them out.

As a product manager, ultimately I hope I'm enabling the developer to learn more than just the code. I hope folks learn WHY we do things, and that decisions are not necessarily made easily. There are reasons. Doing that kind of mentorship is a very different kind of work, and it can be draining.

I was also very liberal with the hacktoberfest-accepted label. Sometimes someone provided a fix that just didn't work due to the app's own quirkiness. They spent time on it, we discussed the issue, they understood. So I closed the PR and added the accepted label, because they did good work and deserved the credit. In other cases, someone would ask questions about an issue, and explain to me why it was not possible to fix, and I'd ask them to submit a PR anyway, and I would give them the credit. Not all valuable contributions are in the form of a PR, but you can have them make a PR to give them credit.

Awesome unexpected PRs gave us more work like alt tags

Talk to the value of working on open source projects as a part of building your resume and experience.

The PRs that most surprised me were ones that made me file additional tickets. Like folks who pointed out accessibility issues and fixed a few; then I went back and made tickets for all the rest.



If you want to work on O-FISH, just follow the same contribution guidelines - we still need you to comment on an issue so that we can assign it to you. We will be relaxing some of the stricter rules, like you won't have to comment on an issue every 3 days, and you can be assigned more than one issue. If you want to contact me, you can find me on the community forums and message me there. Here's how to do it - I'm back on the post where you can claim your badge. I just click on someone's name or picture and I can choose to message them. Or you can go straight to my summary page at `<https://bit.ly/contactSheeri>`__

I look forward to working with everyone again! And again, thank you so much for participating in hacktoberfest - you've really made this a celebration for everyone!


Leaderboard: https://charts.mongodb.com/charts-sheeri-jymux/embed/charts?id=519634dd-f3d1-4b3d-bdb5-80bf5ef2fb3e&theme=dark


.. summary::

   Summary
   -------

   The summary goes here!


   Related Links
   -------------

   Check out the following resources for more information:

   - I got nothing.
